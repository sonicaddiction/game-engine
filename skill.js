// Generated by CoffeeScript 1.6.3
(function() {
  var Skill, SkillFactory, log;

  log = (require('./log')).log;

  Skill = (function() {
    function Skill(name) {
      this.name = name;
      this.skillLevel = 0;
    }

    Skill.prototype.setSkillLevel = function(skillLevel) {
      this.skillLevel = skillLevel;
    };

    Skill.prototype.percentageRoll = function() {
      return Math.random();
    };

    Skill.prototype.d20roll = function() {
      return Math.ceil(Math.random() * 20);
    };

    Skill.prototype.d10roll = function() {
      return Math.ceil(Math.random() * 10);
    };

    Skill.prototype.skillCheck = function(modification, roll) {
      var requirement;
      if (modification == null) {
        modification = 0;
      }
      if (roll == null) {
        roll = this.d20roll();
      }
      requirement = this.skillLevel + modification;
      log("Skillcheck for " + this.name + ": Requirement = " + requirement + ", Roll = " + roll);
      return roll <= requirement;
    };

    Skill.prototype.skillCheckVs = function(difficulty, roll) {
      var diff, requirement;
      if (roll == null) {
        roll = this.d20roll();
      }
      diff = this.skillLevel - difficulty;
      requirement = 10 + diff;
      log("Skillcheck for " + this.name + ": Requirement = " + requirement + ", Roll = " + roll);
      return roll <= requirement;
    };

    Skill.prototype.skillCheckDiff = function(modification, roll) {
      var actualSkill;
      if (modification == null) {
        modification = 0;
      }
      if (roll == null) {
        roll = this.d20roll();
      }
      actualSkill = this.skillLevel + modification;
      log("Skillcheck for " + this.name + ": Actual skill: " + actualSkill + " - Roll: " + roll + " = " + (actualSkill - roll));
      return actualSkill - roll;
    };

    return Skill;

  })();

  SkillFactory = (function() {
    function SkillFactory() {}

    SkillFactory.getSwordSkill = function() {
      return new Skill("sword");
    };

    SkillFactory.getToughness = function() {
      return new Skill("toughness");
    };

    SkillFactory.getInitiative = function() {
      return new Skill("initiative");
    };

    return SkillFactory;

  })();

  exports.Skill = Skill;

  exports.SkillFactory = SkillFactory;

}).call(this);
